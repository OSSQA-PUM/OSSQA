@using System.Text.Json

@* this component handles user requirement inputs*@


<ViewLogo />
<div class="d-flex justify-content-center align-items-center flex-column">
    <h2 style="margin-bottom:1em;">Specify requirement weights</h2>
    <MatDivider></MatDivider>
    @for(int i = 0; i < requirementCategories.Length; i++)
    {
        int j = i; // Required to avoid issue where every bind occurs on i instead of a new integer
        <h3>@requirementCategories[j]</h3>
        <div class="d-flex justify-content-center">
            <MatTextField @bind-Value="@Requirements[j]" Style="max-width:4em; margin-right:2em;" Label="Input" OnFocusOut="()=>SetRequirement()"></MatTextField>
            <MatSlider @bind-Value="@Requirements[j]" Discrete="true" Pin="true" TValue="int" ValueMin="0" ValueMax="10" Style="width:30vw;"></MatSlider>
        </div>
    }
    <MatButton Raised="true" Style="font-size:1.5em; width:20vw;margin-top:2em;" @onclick="()=>{ValidateReqs();}">Analyze</MatButton>
</div>




@code {
    [Parameter]
    public Dictionary<string, List<string[]>> SbomResult { get; set; }
    [Parameter]
    public Action StateHasChangedCallback { get; set; }
    [Parameter]
    public Dictionary<string, string> PostData { get; set; }
    private string[] requirementCategories = ["Vulnerabilities", "Maintenance", "Continuous Testing", "Source Risk Assessment", "Build Risk Assessments"];

    public int Val3
    {
        get => _val3;
        set
        {
            _val3 = value;
            Requirements.Add(value);
            this.StateHasChanged();
        }
    }
    private int _val3 = 0;
    [Parameter]
    public List<int> Requirements { get; set; }

    private void ValidateReqs()
    {
        for (int i = 0; i < Requirements.Count; i++)
        {
            List<string> requirementsString = new();
            requirementsString.Add(Requirements[i].ToString());
        }
        PostData["user_reqs"] = JsonSerializer.Serialize(Requirements);
        StateHasChanged();
        StateHasChangedCallback.Invoke();
    }
    private void SetRequirement()
    {
        for (int i = 0; i < Requirements.Count; i++)
        {
            if (Requirements[i] > 10)
            {
                Requirements[i] = 10;
            }
            if (Requirements[i] < 0)
            {
                Requirements[i] = 0;
            }
        }

    }

}
