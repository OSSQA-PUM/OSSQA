@inject NavigationManager _navigationManager
@using System.Text.Json
@using System.Text;
@inject HttpClient Http
@inject HttpClient httpClient
@using static SbomAnalysis

<div class="d-flex flex-column justify-content-center align-items-center">
    <h4 style="margin-bottom:3em; margin-top:3em;">Look up Previously Analyzed SBOMs in the Database</h4>
    <div class ="d-flex justify-content-center align-items-center">
        <MatTextField Label="Input SBOM repo" PlaceHolder="github.com/user/example" Value="@name" Style="margin-right:2em; max-height:5em; width:30vw;"></MatTextField>
        <h4>OR</h4>
        <MatFileUpload Style="margin-left:2em; max-height:5em; width:30vw;" OnChange="GetInput" Label=@ChosenSbom.ToString()></MatFileUpload>
    </div>

    <MatButton Raised="true" Style="font-size:1.5em; width:20vw;margin-top:2em;" OnClick='()=> GetPrevious()'>Get previous</MatButton>
    <p> @name</p>
    <MatButton Raised="true" Style="font-size:1.5em; width:20vw;margin-top:10em;" OnClick='()=> _navigationManager.NavigateTo("/", true)'>Return to Home</MatButton>
</div>


@if(Analyzing.CurrentCount == 1)
{
    <p>previous sboms</p>
    <div class="d-flex flex-wrap justify-content-evenly">
        @foreach (var sbom in sboms)
        {
            <div style=" min-width:0.3vw; margin-bottom:3em;">
                <h3>@sbom.metadata.component.name</h3>
            </div>
        }
    </div>
}
@code {
    [Parameter]
    public Action StateHasChangedCallback { get; set; }
    [Parameter]
    public Dictionary<string, string> PostData { get; set; }
    [Parameter]
    public SemaphoreSlim Analyzing { get; set; }
    private string name = "";
    private IMatFileUploadEntry? file;
    private bool loadedFile = false;
    public StringBuilder ChosenSbom = new StringBuilder();
    private List<Sbom> sboms = new();
    protected override void OnParametersSet()
    {
        PostData.Clear();
        if (ChosenSbom.Length == 0)
        {
            ChosenSbom.Append("Drag SBOM here or browse");
        }

    }
    private async Task LoadSBOM()
    {

        using var memoryStream = new MemoryStream();
        if (file == null)
        {
            return;
        }
        await file.WriteToStreamAsync(memoryStream);

        string sbomString = Encoding.UTF8.GetString(memoryStream.ToArray());
        try
        {
            Sbom sbom = JsonSerializer.Deserialize<Sbom>(sbomString);
            name = sbom.metadata.component.name;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw(e);
        }
        loadedFile = true;
        StateHasChangedCallback.Invoke();
    }

    private void GetInput(IMatFileUploadEntry[] files)
    {
        foreach (var f in files)
        {
            file = f;
        }
        ChosenSbom.Clear();
        ChosenSbom.Append(file?.Name ?? "Drag SBOM here or browse");
        _ = LoadSBOM();
    }

    private void GetPrevious()
    {
        if (name.Length == 0)
        {
            return;
        }
        var analyzeTask = Http.GetAsync("http://host.docker.internal:98/get_previous_sbom/"+ name);

        Analyzing.Wait();
        _ = analyzeTask.ContinueWith(async t =>
        {
            Analyzing.Release();
            HttpResponseMessage result = await t;
            if (result.IsSuccessStatusCode)
            {
                var previousSboms = await result.Content.ReadAsStringAsync();
                try
                {
                    sboms = JsonSerializer.Deserialize<List<Sbom>>(previousSboms);

                }
                catch (Exception e)
                {
                    throw (e);
                }
                StateHasChangedCallback.Invoke();
                _ = InvokeAsync(StateHasChanged);
            }
        });
    }

    public class Sbom
    {
        public string bomFormat { get; set; }
        public string specVersion { get; set; }
        public Metadata metadata { get; set; }
        public Sbom(string bomFormat, string specVersion, Metadata metadata)
        {
            this.bomFormat = bomFormat;
            this.specVersion = specVersion;
            this.metadata = metadata;
        }
    }

    public class Metadata
    {
        public Component component { get; set; }
        public Metadata(Component component)
        {
            this.component = component;
        }
    }

    public class Component
    {
        public string name { get; set; }
        public Component(string name)
        {
            this.name = name;
        }
    }
}
