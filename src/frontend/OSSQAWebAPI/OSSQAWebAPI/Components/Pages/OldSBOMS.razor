@inject NavigationManager _navigationManager
@using System.Text.Json
@using System.Text;
@using OSSQAWebAPI.Components.PageComponents
@inject HttpClient Http
@inject HttpClient httpClient
@using static SbomAnalysis.Sbom


@if (viewOld == true)
{
    <MatTabGroup Style="margin-bottom:2em;">
        <ResultTabs SbomResult="SbomResult" StateHasChangedCallback="StateHasChangedCallback" Requirements="null" FailedComponents="null" />
    </MatTabGroup>
    <MatButton Style="font-size:1em; width:20vw;" OnClick='()=> _navigationManager.NavigateTo("/", true)'>Return to Home</MatButton>
}
else if(Analyzing.CurrentCount == 1 && sboms is not null && sboms.Count > 0)
{
    <MatButton Style="font-size:1em; width:20vw;" OnClick='()=> _navigationManager.NavigateTo("/", true)'>Return to Home</MatButton>
    <div class="d-flex flex-column justify-content-evenly justify-content-center align-items-center">
        <h4>Select SBOM to view</h4>
        <MatRadioGroup @bind-Value="@OldSbom" TValue="SbomAnalysis.Sbom">
        @foreach(var sbom in sboms)
        {
            <MatRadioButton Value="@sbom" TValue="SbomAnalysis.Sbom">@sbom.repo_name</MatRadioButton>


        }
        </MatRadioGroup>
        <MatButton @onclick="()=> LoadOldSbom()">View</MatButton>
    </div>
}


else
{
    <div class="d-flex flex-column justify-content-center align-items-center">
        <h4 style="margin-bottom:3em;"> Look up Previously Analyzed SBOMs in the Database</h4>
        <div class="d-flex flex-column ustify-content-center align-items-center">
            <MatTextField Label="Input SBOM repo" PlaceHolder="github.com/user/example" Value="@ChosenSbom.ToString()" Style="max-height:5em; width:20vw;"></MatTextField>
            <h4 style="margin-top:2em;margin-bottom:2em;">OR</h4>
            <InputSBOM PostData="PostData" StateHasChangedCallback="ChooseSbomCallback" ChosenSbom="ChosenSbom" />
            <p> @ChosenSbom</p>
        </div>
    </div>
}
@code {
    [Parameter]
    public Action StateHasChangedCallback { get; set; }
    [Parameter]
    public Dictionary<string, string> PostData { get; set; }
    [Parameter]
    public SemaphoreSlim Analyzing { get; set; }
    public StringBuilder ChosenSbom = new StringBuilder();
    private List<SbomAnalysis.Sbom> sboms = new();
    private SbomAnalysis.Sbom OldSbom;
    private bool viewOld = false;
    private List<bool> Selected = new();
    private SortedDictionary<string, int> Requirements = new();
    private List<SbomAnalysis.Sbom> SbomResult = new();
    private string resultOld = "";

    private Action UpdateSelected => () =>
    {
        InvokeAsync(StateHasChanged);
        StateHasChanged();
    };

    protected override void OnInitialized()
    {
        Requirements.Add("Vulnerabilities", -1);
        Requirements.Add("Dependency Update Tool", -1);
        Requirements.Add("Maintained", -1);
        Requirements.Add("Security Policy", -1);
        Requirements.Add("License", -1);
        Requirements.Add("CII Best Practices", -1);
        Requirements.Add("CI Tests", -1);
        Requirements.Add("Fuzzing", -1);
        Requirements.Add("SAST", -1);
        Requirements.Add("Binary Artifacts", -1);
        Requirements.Add("Branch Protection", -1);
        Requirements.Add("Dangerous Workflow", -1);
        Requirements.Add("Code Review", -1);
        Requirements.Add("Contributors", -1);
        Requirements.Add("Pinned Dependencies", -1);
        Requirements.Add("Token Permissions", -1);
        Requirements.Add("Packaging", -1);
        Requirements.Add("Signed Releases", -1);



    }

    private Action ChooseSbomCallback => () =>
    {
        string name = ChosenSbom.ToString();
        try
        {
            Sbom sbom = JsonSerializer.Deserialize<Sbom>(PostData["sbom"]);

            name = sbom.metadata.component.name;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw (e);
        }
        var analyzeTask = Http.GetAsync("http://host.docker.internal:98/get_previous_sbom/" + name);

        Analyzing.Wait();
        _ = analyzeTask.ContinueWith(async t =>
        {
            Analyzing.Release();
            HttpResponseMessage result = await t;
            if (result.IsSuccessStatusCode)
            {
                var previousSboms = await result.Content.ReadAsStringAsync();
                resultOld = previousSboms;
                try
                {
                    sboms = JsonSerializer.Deserialize<List<SbomAnalysis.Sbom>>(previousSboms);
                }
                catch (Exception e)
                {
                    throw (e);
                }
                Selected = new List<bool>();
                for (int i = 0; i < sboms.Count; i++)
                {
                    Selected.Add(false);
                }
                StateHasChangedCallback.Invoke();
                _ = InvokeAsync(StateHasChanged);
            }
        });
    };

    private void LoadOldSbom()
    {
        SbomResult.Add(OldSbom);
        viewOld = true;
    }


    public class Sbom
    {
        public string bomFormat { get; set; }
        public string specVersion { get; set; }
        public Metadata metadata { get; set; }
        public Sbom(string bomFormat, string specVersion, Metadata metadata)
        {
            this.bomFormat = bomFormat;
            this.specVersion = specVersion;
            this.metadata = metadata;
        }
    }

    public class Metadata
    {
        public Component component { get; set; }
        public Metadata(Component component)
        {
            this.component = component;
        }
    }

    public class Component
    {
        public string name { get; set; }
        public Component(string name)
        {
            this.name = name;
        }
    }
}
