
@using System.Diagnostics
@inject HttpClient Http
@inject HttpClient httpClient
@using System.Text.Json
@using System.Text;
@using System.Net.Http.Headers

<p class="d-flex justify-content-center" role="status"> @status</p>
<div class="d-flex justify-content-center">
   
    <InputFile accept=".json" OnChange="GetInput" />
    <button class="btn btn-primary" @onclick="LoadFile">Start scan</button>
    <p>@analyzedSBOM</p>
</div>


@code {
    private IBrowserFile? file;
    private string analyzedSBOM = "";
    private string status = " ";
    private bool loadedFile = false;
    private SemaphoreSlim analyzing = new(1, 1);
    [Parameter]
    public Dictionary<string, List<string[]>> SbomResult { get; set; }
    [Parameter]
    public bool Analyzed { get; set; }

    private async Task LoadFile()
    {
        loadedFile = true;
        using var memoryStream = new MemoryStream();
        if (file == null || analyzing.CurrentCount == 0)
        {
            status = "No file selected";
            return;
        }
        await file.OpenReadStream().CopyToAsync(memoryStream);
        status = "Connecting to port 98...";

        var analyzeTask = Http.PostAsJsonAsync("http://host.docker.internal:98/analyze", System.Text.Encoding.UTF8.GetString(memoryStream.ToArray()));
        analyzing.Wait();
        _ = analyzeTask.ContinueWith(async t =>
        {
            analyzing.Release();
            HttpResponseMessage result = await t;
            if (result.IsSuccessStatusCode)
            {
                var SBOMString = await result.Content.ReadAsStringAsync();
                var jsonobj = JsonSerializer.Deserialize<List<List<string>>>(SBOMString);
                analyzedSBOM = SBOMString;
                DisplaySBOM(jsonobj ?? new List<List<string>>());
                Analyzed = true;
                StateHasChanged();
            }
        });
        _ = PollStatus(analyzing);

    }
    private void DisplaySBOM(List<List<string>> SBOMjson)
    {
        foreach (List<string> component in SBOMjson)
        {
            string key = component[0];
            if (SbomResult.ContainsKey(key))
            {
                SbomResult[key].Add(new string[] { component[1], component[2] });
            }
            else
            {
                SbomResult.Add(key, new List<string[]> { new string[] { component[1], component[2] } });
            }
        }

    }

    private async Task PollStatus(SemaphoreSlim pollUntil)
    {
        while (pollUntil.CurrentCount == 0)
        {
            await Task.Delay(1000);
            HttpResponseMessage response = await Http.GetAsync("http://host.docker.internal:98/get_current_status");
            status = await response.Content.ReadAsStringAsync();
            StateHasChanged();
        }
        status = "Analysis complete";
        StateHasChanged();
    }

    private void GetInput(InputFileChangeEventArgs e)
    {
        file = e.File;
    }
}
