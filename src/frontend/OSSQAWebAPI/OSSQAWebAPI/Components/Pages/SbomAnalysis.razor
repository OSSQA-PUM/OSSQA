@using System.Diagnostics
@inject HttpClient Http
@inject HttpClient httpClient
@using System.Text.Json
@using System.Text;
@using System.Net.Http.Headers
@inject NavigationManager _navigationManager

@* this component sends requests to the backend and retrives the analyzed sbom*@


@if (statusObj is not null)
{
    @* if the status has a step_response, display it *@
    if (statusObj.step_response is not null)
    {
        <div class="d-flex flex-column align-items-center justify-content-center " style="height:50vh;">
            <h3 >@statusObj.current_state</h3>
            <h3>@statusObj.step_response.message</h3>
            <h5>Batch Size: @statusObj.step_response.batch_size</h5>
            <h5>Completed Items: @statusObj.step_response.completed_items</h5>
            <h5>Successful Items: @statusObj.step_response.successful_items</h5>
            <h5>Failed Items: @statusObj.step_response.failed_items</h5>
        </div>
    }
    else
    {
        <div class="d-flex flex-column align-items-center justify-content-center">
            <h3>@statusObj.current_state</h3>
        </div>
    }
}

@* if the analysis is not complete, show loading circle*@
@if (Analyzing.CurrentCount == 0)
{

    <div class="d-flex flex-column align-items-center justify-content-center">
        <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
    </div>
}
@* if analysis is done, show button for re-run*@
else
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        <MatButton Raised="true" OnClick='()=> _navigationManager.NavigateTo("/", true)'> Analyze another SBOM</MatButton>
    </div>
}
@* show failed dependencies and reason, not working at the moment*@

<p>@fullSBOM</p>


@code {
    private float score = 0;
    Dictionary<string, string> statusInfo = new();
    string status = "";
    private string fullSBOM = "full sbom";
    private Status statusObj;
    [Parameter]
    public SemaphoreSlim Analyzing { get; set; }
    [Parameter]
    public Dictionary<string, List<Check>> SbomResult { get; set; }
    [Parameter]
    public Dictionary<string, string> PostData { get; set; }
    [Parameter]
    public Action StateHasChangedCallback { get; set; }
    [Parameter]
    public List<SbomAnalysis.Dependency> FailedComponents { get; set; }

    protected override void OnInitialized()
    {
        Analyze();
    }
    private void Analyze()
    {
        var analyzeTask = Http.PostAsJsonAsync("http://host.docker.internal:98/analyze", PostData);

        Analyzing.Wait();
        _ = analyzeTask.ContinueWith(async t =>
        {
            Analyzing.Release();
            HttpResponseMessage result = await t;
            if (result.IsSuccessStatusCode)
            {
                SbomResult.Clear();
                var SBOMString = await result.Content.ReadAsStringAsync();
                fullSBOM = SBOMString;
                try
                {
                    Sbom sbom = JsonSerializer.Deserialize<Sbom>(SBOMString);
                    AddToDict(sbom, SbomResult);
                    AddFailed(sbom);

                }
                catch (Exception e)
                {
                    throw (e);
                }
                StateHasChangedCallback.Invoke();
                _ = InvokeAsync(StateHasChanged);
            }
        });
        _ = PollStatus(Analyzing);
    }

    public static void AddToDict(Sbom sbom, Dictionary<string, List<Check>> SbomResult)
    {
        foreach (Dependency dependency in sbom.scored_dependencies)
        {
            if (dependency.dependency_score.checks is null)
            {
                continue;
            }
            foreach (Check check in dependency.dependency_score.checks)
            {
                check.dependency = dependency;
                if (SbomResult.ContainsKey(check.name))
                {
                    SbomResult[check.name].Add(check);
                }
                else
                {
                    SbomResult.Add(check.name, new List<Check> { check });
                }
            }
        }
        int count = SbomResult.Count;
    }

    private void AddFailed(Sbom sbom)
    {
        foreach (Dependency dependency in sbom.failed_dependencies)
        {
            FailedComponents.Add(dependency);
        }
    }

    private async Task PollStatus(SemaphoreSlim pollUntil)
    {
        while (pollUntil.CurrentCount == 0)
        {
            await Task.Delay(500);
            HttpResponseMessage response = await Http.GetAsync("http://host.docker.internal:98/get_current_status");
            string responseString = await response.Content.ReadAsStringAsync();
            status = responseString;
            try
            {
                statusObj = JsonSerializer.Deserialize<Status>(responseString);
            }
            catch (Exception e)
            {
                throw (e);
            }
            _ = InvokeAsync(StateHasChanged);
        }
        _ = InvokeAsync(StateHasChanged);
    }

    public class Sbom
    {
        public string serialNumber { get; set; }
        public int version { get; set; }
        public string repo_name { get; set; }
        public string repo_version { get; set; }
        public List<Dependency> scored_dependencies { get; set; }
        public List<Dependency> unscored_dependencies { get; set; }
        public List<Dependency> failed_dependencies { get; set; }

        public Sbom(string serialNumber, int version, string repo_name, string repo_version, List<Dependency> scored_dependencies, List<Dependency> unscored_dependencies, List<Dependency> failed_dependencies)
        {
            this.serialNumber = serialNumber;
            this.version = version;
            this.repo_name = repo_name;
            this.repo_version = repo_version;
            this.scored_dependencies = scored_dependencies;
            this.unscored_dependencies = unscored_dependencies;
            this.failed_dependencies = failed_dependencies;
        }
        public override string ToString()
        {
            return $"Serial Number: {serialNumber}\nVersion: {version}\nRepo Name: {repo_name}\nRepo Version: {repo_version}\n";
        }
    }

    public class Dependency
    {
        public string name { get; set; }
        public string version { get; set; }
        public DependencyScore dependency_score { get; set; }
        public string failure_reason { get; set; }

        public Dependency(string name, string version, DependencyScore dependency_score, string failure_reason)
        {
            this.name = name;
            this.version = version;
            this.dependency_score = dependency_score;
            this.failure_reason = failure_reason;
        }
    }

    public class DependencyScore
    {
        public string date { get; set; }
        public float score { get; set; }
        public List<Check> checks { get; set; }

        public DependencyScore(string date, float score, List<Check> checks)
        {
            this.date = date;
            this.score = score;
            this.checks = checks;
        }
        public override string ToString()
        {
            return $"Date: {date}\nScore: {score}\nChecks: {checks.ToString()}";
        }
    }

    public class Check
    {
        public string name { get; set; }
        public int score { get; set; }
        public string reason { get; set; }
        public List<string> details { get; set; }
        public Dependency dependency { get; set; }

        public Check(string name, int score, string reason, List<string> details)
        {
            this.name = name;
            this.score = score;
            this.reason = reason;
            this.details = details;
        }
        public override string ToString()
        {
            return $"Name: {name}\nScore: {score}\nReason: {reason}\nDetails: {details}";
        }
    }

    public class FailedDependency
    {
        public string name { get; set; }
        public string version { get; set; }
        public string dependency_score { get; set; }
        public string failure_reason { get; set; }

        public FailedDependency(string name, string version, string dependency_score, string failure_reason)
        {
            this.name = name;
            this.version = version;
            this.dependency_score = dependency_score;
            this.failure_reason = failure_reason;
        }
    }

    public class Status
    {
        public string current_state { get; set; }
        public StepResponse step_response { get; set; }

        public Status(string current_state, StepResponse step_response)
        {
            this.current_state = current_state;
            this.step_response = step_response;
        }
        public override string ToString()
        {
            if (step_response is null)
            {
                return $"{current_state}";
            }
            return $"{current_state}    {step_response.ToString()}";
        }
    }

    public class StepResponse
    {
        public int batch_size { get; set; }
        public int completed_items { get; set; }
        public int successful_items { get; set; }
        public int failed_items { get; set; }
        public string message { get; set; }

        public StepResponse(int batch_size, int completed_items, int successful_items, int failed_items, string message)
        {

            this.batch_size = batch_size;
            this.completed_items = completed_items;
            this.successful_items = successful_items;
            this.failed_items = failed_items;
            this.message = message;
        }
        public override string ToString()
        {
            return $"Batch Size: {batch_size}\nCompleted Items: {completed_items}\nSuccessful Items: {successful_items}\nFailed Items: {failed_items}\nMessage: {message}";
        }
    }
}

