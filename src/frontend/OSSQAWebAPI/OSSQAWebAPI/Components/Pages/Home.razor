@*This class stores all information that will otherwise get wiped when refreshing components *@
@page "/"

@using System.Diagnostics
@rendermode InteractiveServer
@using System.Text
@using static SbomAnalysis


<MatThemeProvider Theme="@theme">
    @*shows correct tabs if analysis is complete*@
@if (Analyzing.CurrentCount == 1 && SbomResult.Count > 0)
{
    <MatTabGroup Style="margin-bottom:2em;">
            <MatTab Label="Home">
                <SbomAnalysis SbomResult="SbomResult" Analyzing="Analyzing" StateHasChangedCallback="StateHasChangedCallback" />
            </MatTab>

            <MatTab Label="Code Vulnerabilities">
                <ViewResults SbomResult="SbomResult" Tests='["Vulnerabilities"]' Requirements="Requirements" />
            </MatTab>
            <MatTab Label="Maintenance">
                <ViewResults SbomResult="SbomResult" Tests='["CII-Best-Practices", "Dependency-Update-Tool", "License", "Maintained", "Security-Policy"]' Requirements="Requirements" />
            </MatTab>
            <MatTab Label="Continuous Testing">
                <ViewResults SbomResult="SbomResult" Tests='["CI-Tests", "Fuzzing", "SAST"]' Requirements="Requirements" />
            </MatTab>
            <MatTab Label="Source Risk Assessment">
                <ViewResults SbomResult="SbomResult" Tests='["Binary-Artifacts", "Branch-Protection", "Code-Review", "Contributors", "Dangerous-Workflow"]' Requirements="Requirements" />
            </MatTab>
            <MatTab Label="Build Risk Assessment">
                <ViewResults SbomResult="SbomResult" Tests='["Packaging", "Pinned-Dependencies", "Signed-Releases", "Token-Permissions"]' Requirements="Requirements" />
            </MatTab>
            @if(FailedComponents.Count > 0)
            {
                <MatTab Label="Failed Components">
                    <ShowFailedComponents FailedComponents="FailedComponents" />
                </MatTab>
            }
        </MatTabGroup>
}
    @* if the user has not chosen sbom or requirements *@
else if(!ready)
{
    if (viewOld)
    {
            <OldSBOMS StateHasChangedCallback="StateHasChangedCallback" PostData="PostData" Analyzing="Analyzing" />
    }
    else
    {
        <MatTabGroup @bind-ActiveIndex="@activeTab">
            <MatTab Label="Choose SBOM" @onclick="()=>activeTab = 0">
                <InputSBOM PostData="PostData" StateHasChangedCallback="StateHasChangedCallback" ChosenSbom="ChosenSbom" />
            </MatTab>
            <MatTab Label="Specify Requirements" @onclick="()=>activeTab = 1">
                <SpecifyReqs PostData="PostData" StateHasChangedCallback="StateHasChangedCallback " Requirements="Requirements" />
            </MatTab>
        </MatTabGroup>
        <div class="d-flex flex-column justify-content-center align-items-center">
            <MatButton Raised="true" Style="font-size:1.5em; width:20vw;margin-top:2em;" @onclick="()=> viewOld=true">View Previous Results</MatButton>
        </div>
    }
}

    @* start analysis if done *@
else
{
        <SbomAnalysis SbomResult="SbomResult" Analyzing="Analyzing" StateHasChangedCallback="StateHasChangedCallback" PostData="PostData" FailedComponents="FailedComponents" />
}

</MatThemeProvider>




@code {
    private Dictionary<string, List<Check>> SbomResult = new();
    StringBuilder ChosenSbom = new StringBuilder();
    private SemaphoreSlim Analyzing = new(1, 1);
    private List<Dependency> FailedComponents = new();
    public int activeTab = 0;
    private Dictionary<string, string> PostData = new();
    private string SBOM = "";
    bool ready = false;
    bool viewOld = false;
    private SortedDictionary<String, int> Requirements = new();

    protected override void OnInitialized()
    {
        Requirements.Add("Vulnerabilities", 0);
        Requirements.Add("Dependency Update Tool", 0);
        Requirements.Add("Maintained", 0);
        Requirements.Add("Security Policy", 0);
        Requirements.Add("License", 0);
        Requirements.Add("CII Best Practices", 0);
        Requirements.Add("CI Tests", 0);
        Requirements.Add("Fuzzing", 0);
        Requirements.Add("SAST", 0);
        Requirements.Add("Binary Artifacts", 0);
        Requirements.Add("Branch Protection", 0);
        Requirements.Add("Dangerous Workflow", 0);
        Requirements.Add("Code Review", 0);
        Requirements.Add("Contributors", 0);
        Requirements.Add("Pinned Dependencies", 0);
        Requirements.Add("Token Permissions", 0);
        Requirements.Add("Packaging", 0);
        Requirements.Add("Signed Releases", 0);



    }
    private Action StateHasChangedCallback =>()=>
    {
        UpdateTab();
        InvokeAsync(StateHasChanged);
    };


    private void UpdateTab()
    {
        if (!PostData.ContainsKey("sbom"))
        {
            activeTab = 0;

        }
        else if (!PostData.ContainsKey("user_reqs"))
        {
            activeTab = 1;
        }
        else
        {
            ready = true;
        }
    }

    MatTheme theme = new MatTheme()
        {
            Primary = "#88bcec",
            Secondary = MatThemeColors.BlueGrey._500.Value,
        };

    void ChangeTab(MouseEventArgs e)
    {
        activeTab = activeTab == 0 ? activeTab = 1 : 0;
    }

}