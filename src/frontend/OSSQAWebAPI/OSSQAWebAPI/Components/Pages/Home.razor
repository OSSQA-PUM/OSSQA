@*This class stores all information that will otherwise get wiped when refreshing components *@
@page "/"

@using System.Diagnostics
@rendermode InteractiveServer
@using System.Text
@using OSSQAWebAPI.Components.PageComponents
@using static SbomAnalysis


<MatThemeProvider Theme="@theme">
    @*shows correct tabs if analysis is complete*@
@if (Analyzing.CurrentCount == 1 && SbomResult.Count > 0)
{
    <MatTabGroup Style="margin-bottom:2em;">
            <MatTab Label="Home">
                <SbomAnalysis SbomResult="SbomResult" Analyzing="Analyzing" StateHasChangedCallback="StateHasChangedCallback" />
            </MatTab>

        <ResultTabs SbomResult="SbomResult" StateHasChangedCallback="StateHasChangedCallback" Requirements="Requirements" FailedComponents="FailedComponents" />
    </MatTabGroup>
}
    @* if the user has not chosen sbom or requirements *@
else if(!ready)
{
    if (viewOld)
    {
            <OldSBOMS StateHasChangedCallback="StateHasChangedCallback" PostData="PostData" Analyzing="Analyzing" />
    }
    else
    {
        <MatTabGroup @bind-ActiveIndex="@activeTab">
            <MatTab Label="Choose SBOM" @onclick="()=>activeTab = 0">
                <div class="d-flex flex-column justify-content-center align-items-center">
                <ViewLogo/>
                <InputSBOM PostData="PostData" StateHasChangedCallback="StateHasChangedCallback" ChosenSbom="ChosenSbom" />
                </div>
            </MatTab>
            <MatTab Label="Specify Requirements" @onclick="()=>activeTab = 1">
                <SpecifyReqs PostData="PostData" StateHasChangedCallback="StateHasChangedCallback " Requirements="Requirements" />
            </MatTab>
        </MatTabGroup>
        <div class="d-flex flex-column justify-content-center align-items-center">
            <MatButton Style="font-size:1em; width:20vw;margin-top:25em;" @onclick="()=> viewOld=true">View Previous Results</MatButton>
        </div>
    }
}

    @* start analysis if done *@
else
{
        <SbomAnalysis SbomResult="SbomResult" Analyzing="Analyzing" StateHasChangedCallback="StateHasChangedCallback" PostData="PostData" FailedComponents="FailedComponents" />
}

</MatThemeProvider>




@code {
    private Dictionary<string, List<Check>> SbomResult = new();
    StringBuilder ChosenSbom = new StringBuilder();
    private SemaphoreSlim Analyzing = new(1, 1);
    private List<Dependency> FailedComponents = new();
    public int activeTab = 0;
    private Dictionary<string, string> PostData = new();
    private string SBOM = "";
    bool ready = false;
    bool viewOld = false;
    private SortedDictionary<String, int> Requirements = new();

    protected override void OnInitialized()
    {
        Requirements.Add("Vulnerabilities", -1);
        Requirements.Add("Dependency Update Tool", -1);
        Requirements.Add("Maintained", -1);
        Requirements.Add("Security Policy", -1);
        Requirements.Add("License", -1);
        Requirements.Add("CII Best Practices", -1);
        Requirements.Add("CI Tests", -1);
        Requirements.Add("Fuzzing", -1);
        Requirements.Add("SAST", -1);
        Requirements.Add("Binary Artifacts", -1);
        Requirements.Add("Branch Protection", -1);
        Requirements.Add("Dangerous Workflow", -1);
        Requirements.Add("Code Review", -1);
        Requirements.Add("Contributors", -1);
        Requirements.Add("Pinned Dependencies", -1);
        Requirements.Add("Token Permissions", -1);
        Requirements.Add("Packaging", -1);
        Requirements.Add("Signed Releases", -1);



    }
    private Action StateHasChangedCallback =>()=>
    {
        UpdateTab();
        InvokeAsync(StateHasChanged);
    };


    private void UpdateTab()
    {
        if (!PostData.ContainsKey("sbom"))
        {
            activeTab = 0;

        }
        else if (!PostData.ContainsKey("user_reqs"))
        {
            activeTab = 1;
        }
        else
        {
            ready = true;
        }
    }

    MatTheme theme = new MatTheme()
        {
            Primary = "#88bcec",
            Secondary = MatThemeColors.BlueGrey._500.Value,
        };

    void ChangeTab(MouseEventArgs e)
    {
        activeTab = activeTab == 0 ? activeTab = 1 : 0;
    }

}