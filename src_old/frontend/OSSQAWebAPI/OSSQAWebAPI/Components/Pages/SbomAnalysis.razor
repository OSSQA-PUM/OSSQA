@using System.Diagnostics
@inject HttpClient Http
@inject HttpClient httpClient
@using System.Text.Json
@using System.Text;
@using System.Net.Http.Headers

<div class="d-flex justify-content-center flex-column align-items-center m-5">
    <img src="/images/LOGO_OSSQA.png" asp-append-version="true" width="500px" />
    
</div>


@if (statusInfo is not null && statusInfo.Count > 0)
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        @if(!statusInfo["job_message"].StartsWith("Successfully")) 
        {
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
            <p>
                @statusInfo["job_message"] (@statusInfo["success_dependency_count"]/@statusInfo["subjob_max_dependency_count"])
            </p>
        }
        else
        {
            string[] message = statusInfo["job_message"].Split(".");
            foreach (string m in message)
            {
                if(m.Length > 0)
                {
                    <p style="margin:0 0 0.5em 0; padding:0;">
                        @m.
                    </p>
                }

            }
            <p style="font-size:x-large">Score: @score/10 </p>
        }

         
    </div>
}
<div class="d-flex flex-column justify-content-center align-items-center" >
    <MatFileUpload OnChange="GetInput" Label=@fileLabel Style="width:50vw;margin-bottom:2em;"></MatFileUpload>
    <MatButton Raised="true" Style="font-size:1.5em; width:20vw;" @onclick="LoadFile">Analyze</MatButton>
    <p>@analyzedSBOM</p>
</div>




@code {
    private IMatFileUploadEntry? file;
    private string fileLabel = "Drop file here or browse";
    private string analyzedSBOM = "";
    private string status = " ";
    private float score = 0;
    private bool loadedFile = false;
    [Parameter]
    public SemaphoreSlim Analyzing { get; set; }
    [Parameter]
    public Dictionary<string, List<string[]>> SbomResult { get; set; }
    private Dictionary<string,string> statusInfo = new();
    private Dictionary<string, string> postData = new();
    [Parameter]
    public Action StateHasChangedCallback { get; set; }

    private async Task LoadFile()
    {
        loadedFile = true;
        using var memoryStream = new MemoryStream();
        if (file == null || Analyzing.CurrentCount == 0)
        {
            status = "No file selected";
            return;
        }
        await file.WriteToStreamAsync(memoryStream);
        status = "Connecting to port 98...";
        postData.Clear();
        postData.Add("sbom", System.Text.Encoding.UTF8.GetString(memoryStream.ToArray()));

        var analyzeTask = Http.PostAsJsonAsync("http://host.docker.internal:98/analyze", postData);

        Analyzing.Wait();
        _ = analyzeTask.ContinueWith(async t =>
        {
            Analyzing.Release();
            HttpResponseMessage result = await t;
            if (result.IsSuccessStatusCode)
            {
                SbomResult.Clear();
                var SBOMString = await result.Content.ReadAsStringAsync();
                var jsonobj = JsonSerializer.Deserialize<List<List<string>>>(SBOMString);
                DisplaySBOM(jsonobj ?? new List<List<string>>());
                status = "Analysis complete";
                StateHasChangedCallback.Invoke();
                score = GetScore();
            }
        });
        _ = PollStatus(Analyzing);

    }
    private void DisplaySBOM(List<List<string>> SBOMjson)
    {
        foreach (List<string> component in SBOMjson)
        {
            string key = component[0];
            if (SbomResult.ContainsKey(key))
            {
                SbomResult[key].Add(new string[] { component[1], component[2] });
            }
            else
            {
                SbomResult.Add(key, new List<string[]> { new string[] { component[1], component[2] } });
            }
        }

    }
    private float GetScore()
    {
        float score = 0;
        int count = 0;
        for(int i = 0; i < SbomResult.Count; i++)
        {
            for(int j = 0; j < SbomResult.ElementAt(i).Value.Count; j++)
            {
                score += float.Parse(SbomResult.ElementAt(i).Value[j][0]);
                count++;
            }
        }
        return float.Round(score/count,2);
    }

    private async Task PollStatus(SemaphoreSlim pollUntil)
    {
        while (pollUntil.CurrentCount == 0)
        {
            await Task.Delay(1000);
            HttpResponseMessage response = await Http.GetAsync("http://host.docker.internal:98/get_current_status");
            status = await response.Content.ReadAsStringAsync();
            statusInfo = JsonSerializer.Deserialize<Dictionary<string, string>>(status);
            StateHasChanged();
        }
        status = "Analysis complete";
        StateHasChanged();
    }

    private void GetInput(IMatFileUploadEntry[] files)
    {
        foreach (var f in files)
        {
            file = f;
        }
        fileLabel = file?.Name ?? "Drop file here or browse";
    }
}
